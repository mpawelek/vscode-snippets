{
	// Place your snippets for java here. Each snippet is defined under a snippet name and has a prefix, body and 
	// description. The prefix is what is used to trigger the snippet and the body will be expanded and inserted. Possible variables are:
	// $1, $2 for tab stops, $0 for the final cursor position, and ${1:label}, ${2:another} for placeholders. Placeholders with the 
	// same ids are connected.
	// Example:
	// "Print to console": {
	// 	"prefix": "log",
	// 	"body": [
	// 		"console.log('$1');",
	// 		"$2"
	// 	],
	// 	"description": "Log output to console"
	// }
	"test.rest": {
		"prefix": "test.rest",
		"body": [
			"import static org.springframework.test.web.servlet.request.MockMvcRequestBuilders.get;",
			"",
			"import org.junit.jupiter.api.Test;",
			"import org.junit.jupiter.api.extension.ExtendWith;",
			"import org.springframework.beans.factory.annotation.Autowired;",
			"import org.springframework.boot.test.autoconfigure.web.servlet.AutoConfigureMockMvc;",
			"import org.springframework.boot.test.context.SpringBootTest;",
			"import org.springframework.test.context.ActiveProfiles;",
			"import org.springframework.test.context.junit.jupiter.SpringExtension;",
			"import org.springframework.test.web.servlet.MockMvc;",
			"import org.springframework.test.web.servlet.MvcResult;",
			"",
			"@ExtendWith(SpringExtension.class)",
			"@SpringBootTest",
			"@ActiveProfiles(\"default\")",
			"@AutoConfigureMockMvc",
			"public class JpaIT {",
			"",
			"\t@Autowired",
			"\tprivate MockMvc mockMvc;",
			"",
			"\t@Test",
			"\tpublic void test() throws Exception {",
			"\t\tMvcResult reply = mockMvc.perform(get(\"/test\")).andReturn();",
			"\t\tSystem.out.println(reply.getResponse().getContentAsString());",
			"\t}",
			"}",
		]
	},
	"postgres": {
		"prefix": "jpa.postgres",
		"body": [
			"import java.util.HashMap;",
			"import java.util.Map;",
			"",
			"import javax.persistence.EntityManagerFactory;",
			"import javax.sql.DataSource;",
			"",
			"import com.zaxxer.hikari.HikariDataSource;",
			"",
			"import org.eclipse.persistence.config.PersistenceUnitProperties;",
			"import org.springframework.boot.autoconfigure.orm.jpa.JpaProperties;",
			"import org.springframework.context.annotation.Bean;",
			"import org.springframework.context.annotation.Configuration;",
			"import org.springframework.context.annotation.Profile;",
			"import org.springframework.instrument.classloading.InstrumentationLoadTimeWeaver;",
			"import org.springframework.orm.jpa.JpaTransactionManager;",
			"import org.springframework.orm.jpa.JpaVendorAdapter;",
			"import org.springframework.orm.jpa.LocalContainerEntityManagerFactoryBean;",
			"import org.springframework.orm.jpa.vendor.EclipseLinkJpaVendorAdapter;",
			"import org.springframework.transaction.PlatformTransactionManager;",
			"import org.springframework.transaction.annotation.EnableTransactionManagement;",
			"",
			"@Configuration",
			"@EnableTransactionManagement",
			"@Profile(\"default\")",
			"public class $1 {",
			"\t@Bean",
			"\tpublic DataSource dataSource() {",
			"\t\tHikariDataSource d=new HikariDataSource();",
			"\t\td.setJdbcUrl(\"jdbc:postgresql://localhost/a\");",
			"\t\td.setUsername(\"michal\");",
			"\t\td.setPassword(\"Rambo1979\");",
			"\t\td.setDriverClassName(\"org.postgresql.Driver\");",
			"\t\td.setMaximumPoolSize(11);",
			"\t\treturn d;",
			"\t}",
			"\t",
			"\t@Bean",
			"\tpublic LocalContainerEntityManagerFactoryBean entityManagerFactory(",
			"\t\t\tDataSource dataSource, JpaVendorAdapter jpaVendorAdapter, JpaProperties jpaProperties) {",
			"\t\tLocalContainerEntityManagerFactoryBean entityManagerFactoryBean = new LocalContainerEntityManagerFactoryBean();",
			"\t\tentityManagerFactoryBean.setDataSource(dataSource);",
			"\t\tentityManagerFactoryBean.setJpaVendorAdapter(jpaVendorAdapter);",
			"\t\tentityManagerFactoryBean.setJpaPropertyMap(jpaProperties.getProperties());",
			"\t\tentityManagerFactoryBean.setPersistenceUnitName(\"a\");",
			"\t\tentityManagerFactoryBean.setPackagesToScan(\"com.github.mpawelek\");",
			"",
			"\t\treturn entityManagerFactoryBean;",
			"\t}",
			"",
			"\t@Bean",
			"\tpublic JpaVendorAdapter jpaVendorAdapter() {",
			"//        return new HibernateJpaVendorAdapter();",
			"\t\tEclipseLinkJpaVendorAdapter vendor = new EclipseLinkJpaVendorAdapter();",
			"\t\tvendor.setDatabasePlatform(\"org.eclipse.persistence.platform.database.PostgreSQLPlatform\");",
			"\t\treturn vendor;",
			"\t}",
			"",
			"\t@Bean",
			"\tpublic PlatformTransactionManager transactionManager(EntityManagerFactory emf) {",
			"\t\treturn new JpaTransactionManager(emf);",
			"\t}",
			"",
			"\t@Bean",
			"\tpublic JpaProperties jpaProperties() {",
			"\t\tMap<String, String> props = new HashMap<>();",
			"\t\tprops.put(\"hibernate.temp.use_jdbc_metadata_defaults\", \"false\");",
			"\t\tprops.put(\"hibernate.dialect\", \"org.hibernate.dialect.PostgreSQL9Dialect\");",
			"\t\tprops.put(\"hibernate.hbm2ddl.auto\", \"validate\");",
			"\t\tprops.put(\"hibernate.show_sql\", \"true\");",
			"",
			"\t\t// eclipselink",
			"\t\tprops.put(PersistenceUnitProperties.WEAVING, InstrumentationLoadTimeWeaver.isInstrumentationAvailable() ? \"true\" : \"static\");",
			"\t\tprops.put(\"eclipselink.logging.level\", \"FINEST\");",
			"\t\tprops.put(\"eclipselink.logging.level.sql\", \"FINE\");",
			"\t\tprops.put(\"eclipselink.logging.parameters\", \"true\");",
			"\t\tprops.put(\"eclipselink.orm.validate.schema\", \"true\");",
			"\t\tprops.put(\"eclipselink.cache.shared.default\", \"false\");",
			"",
			"\t\tJpaProperties jpaProps = new JpaProperties();",
			"\t\tjpaProps.setProperties(props);",
			"\t\treturn jpaProps;",
			"\t}",
			"}",
		]
	},
	"h2": {
		"prefix": "jpa.h2",
		"body": [
			"import java.util.HashMap;",
			"import java.util.Map;",
			"",
			"import javax.persistence.EntityManagerFactory;",
			"import javax.sql.DataSource;",
			"",
			"import com.zaxxer.hikari.HikariDataSource;",
			"",
			"import org.eclipse.persistence.config.PersistenceUnitProperties;",
			"import org.springframework.boot.autoconfigure.orm.jpa.JpaProperties;",
			"import org.springframework.context.annotation.Bean;",
			"import org.springframework.context.annotation.Configuration;",
			"import org.springframework.context.annotation.Profile;",
			"import org.springframework.instrument.classloading.InstrumentationLoadTimeWeaver;",
			"import org.springframework.orm.jpa.JpaTransactionManager;",
			"import org.springframework.orm.jpa.JpaVendorAdapter;",
			"import org.springframework.orm.jpa.LocalContainerEntityManagerFactoryBean;",
			"import org.springframework.orm.jpa.vendor.EclipseLinkJpaVendorAdapter;",
			"import org.springframework.transaction.PlatformTransactionManager;",
			"import org.springframework.transaction.annotation.EnableTransactionManagement;",
			"",
			"@Configuration",
			"@EnableTransactionManagement",
			"@Profile(\"test\")",
			"public class $1 {",
			"\t@Bean",
			"\tpublic DataSource dataSource() {",
			"\t\tHikariDataSource ds = new HikariDataSource();",
			"\t\tds.setJdbcUrl(\"jdbc:h2:./target/h2.db\");",
			"\t\tds.setUsername(\"sa\");",
			"\t\tds.setDriverClassName(\"org.h2.Driver\");",
			"\t\treturn ds;",
			"\t}",
			"",
			"\t@Bean",
			"\tpublic LocalContainerEntityManagerFactoryBean entityManager(",
			"\t\t\tDataSource dataSource, JpaVendorAdapter jpaVendorAdapter, JpaProperties jpaProperties) {",
			"\t\tLocalContainerEntityManagerFactoryBean entityManagerFactoryBean = new LocalContainerEntityManagerFactoryBean();",
			"\t\tentityManagerFactoryBean.setDataSource(dataSource);",
			"\t\tentityManagerFactoryBean.setJpaVendorAdapter(jpaVendorAdapter);",
			"\t\tentityManagerFactoryBean.setJpaPropertyMap(jpaProperties.getProperties());",
			"\t\tentityManagerFactoryBean.setPersistenceUnitName(\"a\");",
			"\t\tentityManagerFactoryBean.setPackagesToScan(\"com.github.mpawelek\");",
			"",
			"\t\treturn entityManagerFactoryBean;",
			"\t}",
			"",
			"\t@Bean",
			"\tpublic JpaVendorAdapter jpaVendorAdapter() {",
			"//        return new HibernateJpaVendorAdapter();",
			"\t\tEclipseLinkJpaVendorAdapter vendor = new EclipseLinkJpaVendorAdapter();",
			"\t\tvendor.setDatabasePlatform(\"org.eclipse.persistence.platform.database.H2Platform\");",
			"\t\treturn vendor;",
			"\t}",
			"",
			"\t@Bean",
			"\tpublic PlatformTransactionManager transactionManager(EntityManagerFactory emf) {",
			"\t\treturn new JpaTransactionManager(emf);",
			"\t}",
			"",
			"\t@Bean",
			"\tpublic JpaProperties jpaProperties() {",
			"\t\tMap<String, String> props = new HashMap<>();",
			"\t\tprops.put(\"eclipselink.ddl-generation\", \"drop-and-create-tables\");",
			"\t\tprops.put(\"eclipselink.ddl-generation.output-mode\", \"database\");",
			"\t\tprops.put(PersistenceUnitProperties.WEAVING, InstrumentationLoadTimeWeaver.isInstrumentationAvailable() ? \"true\" : \"static\");",
			"\t\tprops.put(\"eclipselink.logging.level\", \"FINEST\");",
			"\t\tprops.put(\"eclipselink.logging.level.sql\", \"FINE\");",
			"\t\tprops.put(\"eclipselink.logging.parameters\", \"true\");",
			"\t\tprops.put(\"eclipselink.orm.validate.schema\", \"true\");",
			"\t\tprops.put(\"eclipselink.cache.shared.default\", \"false\");",
			"\t\tJpaProperties jpaProps = new JpaProperties();",
			"\t\tjpaProps.setProperties(props);",
			"\t\treturn jpaProps;",
			"\t}",
			"}",
		]
	}
}